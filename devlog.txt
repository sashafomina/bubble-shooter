StringCheese
Sasha Fomina
Daniel Ju
Kevin Li
pd 4
---------------------
Bubble Shooter!

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Dotted Line: although it seemed pretty easy, we had a bit of trouble figuring out how to draw the dotted line, because building small line segments whose angle was constantly changing required a lot of math and keys to success.
2. Hanging bubbles issue: it was easy enough to clear bubbles if more than 3 of the same colors were touching, but being able to then determine which bubbles were no longer hanging on and needed to be popped was quite difficult, and it required a lot of discussion. Daniel and Kevin had spent a lot of time talking through an algorithm that we attempted but could not debug, but then Sasha took a different approach and it worked out. It taught us that the time spent on a problem doesn't necessarily correlate to the success in solving it, and having a group member be able to step back and say "what if we tried this other very different approach" is very valuable.

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Fix the bug with the updating of rows of bubbles: there are rare occasions where the bubbles do not pop correctly, and it needs to be further analyzed and tested to be able to debug. Since trying to repeat the bug in itself took a lot of time due to how rare it was, we fel that it wasn't absolutely urgent in order to present a playable and complex game.
2. The undo button: we originally planned to create this using the stack data structure, but it was something we pushed off and never had the chance to pursue.
3. Make pop appear as if the bubbles fall down: a simple animation that could make our game look cooler.
4. Different difficulty settings: There are ways we could've easily varied complexity, such as increasing the number of colors, pushing the rows of bubbles down at a faster rate, and making the game board bigger.
5. Dotted Line: the dotted line extends to the end of the board, but we wanted it to end at the point where it reached a bubble, but we didn't pursue this simply because we tried it, and felt that the time spent working on it was not work what it might have contributed to our game.
6. When a bubble is aimed and hits the ceiling directly, it bounces off walls until it sticks to a bubble.

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Hex grid structure: it was a big point of discussion at the beginning of the project, because we were not sure exactly the best way to implement it, given its complexity. It was interesting throughout the project in figuring out how to use it, the relationship between different grids, and how we could build relationships between them.

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. No undo button: we didn't have the time to, and we felt like we were using enough semester two concepts that it wasn't extremely necessary to include.
We were very happy that we ended up doing most of what we wanted to and paced ourselves well, it felt like a complete project because we were able to incorporate many of the features of bubble shooter, and it felt like a fun game to play!

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Keys to Success continue to save lives: since so much of processing is visual, understanding things like popping clusters, the dotted line, or even just the hex grid in general were all easier to code when we drew things out.
2. Start slow: We had a slow start to the project, and didn't really begin doing serious coding at least 10 days into the project, but it was better that way, because we knew exactly how we were going to approach many big problems we were anticipating, and we felt confident that our time coding could be spent efficiently. In the long run, it saved us a lot of time.
3. Team Dynamic: we worked well together, and it was obvious that when we worked at the same time and simultaneously talked through the problems, we coded faster and could do better things, because all 3 of us had a variety of approaches to everything and talked through the pros and cons of them, versus on some days, when the other two members were busy, we could only do so little before getting stuck and wanting to consult our teammates.

||||||||||||||||||||||||||||||||||||||||||

 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================

2017-05-17
--------------------------------------------------------------
Sasha :: wrote up proposal based on discussion with Kevin and Daniel 

2017-05-18
--------------------------------------------------------------
Sasha :: wrote up the first version of the plan and preliminary notes for the more of the speicifics of the design in a shared google doc
Kevin :: Edited and suggested changes to Sasha's initial plan draft, changes to be uploaded later.

2017-05-21
--------------------------------------------------------------
Kevin :: Created basic processing sketch for ball and ballshooter

2017-05-22
--------------------------------------------------------------
Sasha :: Came up with more ways to implement semester 2 data structures and algorithms.
Daniel :: Came up with more ways to implement semester 2 data structures and algorithms.
Kevin :: Came up with more ways to implement semester 2 data structures and algorithms.

2017-05-23
--------------------------------------------------------------
Daniel :: Updated the proposal to reflect comments from Mr. Brown. Uploaded proposal to Git repo. Also created the flow chart.

2017-05-24
--------------------------------------------------------------
Daniel :: Worked on integrating loops into our flowchart
Kevin :: Worked on integrating loops into our flowchart

2017-05-25
--------------------------------------------------------------
Kevin :: Began working on the Bubble class

2017-05-26
--------------------------------------------------------------
Kevin :: Finished the Bubble skeleton

2017-05-27
--------------------------------------------------------------
Sasha :: Filled in Bubble skeleton and started Bubble_Shooter driver class. A test Bubble in the drive class is now able to be launched based on the angle of themouse click and a pointer line of a certain length is draw from the bubble's startign position to based on the angle of the mouse hovering. Bubble can only be launched once.

2017-05-29
--------------------------------------------------------------
Kevin :: Added descriptions for how the user plays the game and how the game works into the READme

2017-05-30
--------------------------------------------------------------
Sasha :: Added BubbleGrid class that populated a 2D array of Bubbles according to the hex grid layout with randomly colored Bubbles, so that every given Bubbble can only have a maximum of 6 neighbor Bubbles. Ensured that the xcors and ycors are such that the Bubble grid is displayed properly (an instance of type Bubble grid was added to the driver class).
Daniel :: Fixed flowchart. Revised plan to the most updated version.
Kevin :: Worked on creating the dotted line for launching and aiming the bubbble. Used a loop to recreate a line, updating the start and endpoints to advance on the same line (following the same slope) each time. The color and size of the line was also adjusted for a better visual impression.

2017-05-31
--------------------------------------------------------------
Sasha :: Added setNeighbors method in BubbleGrid which ensures that all Bubbles keep track of their non-null neighbors including their unactive neighbors (state == 0). Modified populate so that half of the rows are filled with unactive bubble, in other words "open spaces" for bubbles to attach to. 
Daniel :: Attempted to create the inContact method, which checks to see if the bubble that is in motion comes into contact with a bubble thats already in the bubble field. Also tried to modify the move method so that if contact is reached, the bubble would be snapped into the bubble grid.
Kevin :: Fixed the dotted line, such that it has a limit of PI/12 out from the left and right bottom sides of the screen as options to shoot, and fixed appearance of the line including thickness and color.

2017-06-01
--------------------------------------------------------------
Sasha :: Transfered inContact method to the Bubble class. Added stick() and whichNeighbor() to the BubbleGird class, reworked Daniel's methods to use a different strategy in which the launched Bubble finds the first grid bubble it collides with and then searchs through its available neighbors to see which available slot is closest to the position of the bubble. Once the closest neighbor is found, the launched bubble's velocity is set to 0 and the launched bubble is set to a new random one to be launched. The closest neighbor is activated (state == 1) and its color is set to the color of the just launched bubble to create the illusion that the launched bubble was snapped in place. 
Daniel :: Created an updated plan. Editted BubbleShooter to implement a queue of all upcoming bubbles.
Kevin :: Revised READme gameplay instructions based on examples from other groups.


2017-06-03
--------------------------------------------------------------
Sasha :: Fixed bug - although the dotted line was limited to an angle of PI/12 the launching movement of the bubble was not, so I limited it to PI/12. Worked on popping mechanism.
Kevin :: Attempted to cut the dotted line short so that it doesn't go past bubbles on the bubble grid, but nothing has worked yet-- will consult with Sasha and Daniel in the coming days.

2017-06-04
--------------------------------------------------------------
Sasha :: Implemented popping mechanism using recursion and a linked list. When a bubble is snapped into place a linked list cluster is recursively created that contains all its same color neighbors and the same color neighbors of its neighbors and ... ect. To ensure that no bubble is added into the cluster twice, a new boolean instance var of Bubble (_checked) was added. The pop() method is then invoked. If cluster is greater in size than 3, then all its constituents' states are set to -1 and removed from the cluster as their _checked vars are set back to false. Otherwise, they are removed from the cluster their _checked vars is set to false but their states remain 1. UNRESOLVED PROBLEM: there are hanging bubbles, that are not attached to anything once the cluster is popped which remain active.
Daniel :: Skyped Kevin to consult about the problems with the floating bubbles.
Kevin :: Skyped Daniel in the evening to discuss a solution to the problem of floating bubbles not popping, i.e. even though a cluster of bubbles of the same colors would pop, it can potential leave other colored bubbles floating. We came up with a solution that uses recursive backtracking to check if a bubble's side and bottom neighbors have any top neighbors. New instance variables were created for the Bubble class, called _checked and _floating, both booleans that aid in the solution. New methods were also created ArrayList<Bubble>s of a certain type of neighbor, like side neighbors and top neighbors, because we found them useful. Code is still not completely debugged, however.

2017-06-05
--------------------------------------------------------------
Sasha :: Resolved hanging bubble issue ( bubble not attached to anything that remain). Added a new state variable called _hanging in Bubble and methods findHanging(), markHanging() that identitfy hanging bubbles and set their states to 0. Every bubble starts out with a state of 0 hanging and recursively traversing the active neighbors starting from the top row bubbles, you can identify the hanging bubles becuase they will not be vistied by the traversal, thus, thay can be marked accordingly.
Daniel :: Created the Redraw method in BubbleGrid, which augments the numbers of bubbles in play by one row every ten shots. Also created the checkGameStatus method in BubbleGrid to check if the bubbles has exceeded a certain threshold, and therefore the game should end. UNRESOLVED ISSUE: what it will look like after the game indeed ends.

2017-06-06
--------------------------------------------------------------
Sasha :: Add method that adds  a top row every 5 turns, given the last turn was not a successful pop. This involves shifting all the existing bubbles one row down and adding an instance vor _numMoved to keep track of how many rows have been added throughout the game since the top row alternates Bubble,null, Bubble , null ... (as do all even rows) and odd rows start with null and alternate. Therefore, when shifting bubbles down I have to adjust their xcor dinates accordingly. Also, Fixed bug where top row Bubbles are considered hanging  by adding resetHanging method and making sure all top row elements are initially marked as not hanging during setup. 
Daniel :: Updated Bubble_Shooter to implement a start screen and a way for the game to restart. Also created a system to keep track of player's score and largest cluster of bubbles popped. 
Kevin :: Worked with Sasha on fixing the hanging bubbles bug, when the top row of bubbles wouldn't pop.

2017-06-07
--------------------------------------------------------------
Sasha ::  Added methods that check if lost or won, and integrated Daniel's method's into the shared code base
Daniel :: Added start screen, end screen , start over button, and end screen stats
Kevin :: Created a name and bubbleShooter text on game board, worked on visual aspects of the start and restart screens, wrote devlog, typed up/updated uml.
==============================================================





